/*
 * In UNIX command line:
 * Compile: javac -cp .:htmlunit-2.31-OSGI.jar IndeedScraper.java
 */

import java.io.*;
import java.util.*;
import com.gargoylesoftware.htmlunit.*;
import com.gargoylesoftware.htmlunit.html.HtmlPage;
import com.gargoylesoftware.htmlunit.html.DomElement;
import com.gargoylesoftware.htmlunit.html.HtmlForm;
import com.gargoylesoftware.htmlunit.html.HtmlInput;
import java.net.MalformedURLException;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;

public class IndeedScraper {
	public static void main(String[] args) {
		
		//Create a new IndeedClient and log us in!
		String[] jobs = {"retail", "call center", "software engineer", "fast food", "manufacturing"};
		IndeedClient client = new IndeedClient("retail", "10027");
		String url = client.search();
		System.out.println(url);
		
		//Let's scrape our messages, information behind a search.
		//https://www.reddit.com/message/mes
		//pages is the URL where messages are located.

		Document doc = null;
		try {
			
			doc = Jsoup.connect(url).get();
			
		}catch (IOException e) {
			e.printStackTrace();
		}
		
		Element searchCount = doc.getElementById("searchCount");
		String countTxt = searchCount.ownText();
		String numJobsTxt = countTxt.split(" ")[3];
		int numJobs = Integer.parseInt(numJobsTxt.replaceAll(",", ""));
		System.out.println(numJobs);
	}
	
	public ArrayList<String> readZipCodes() {
		ArrayList<String> zipCodes = new ArrayList<>();
		
		File file = new File("free-zipcode-database.csv");

        try{
            Scanner in = new Scanner(file);
            while(in.hasNextLine()){
                String line = in.nextLine();
                String[] arr = line.split(",");
                String zipCode = arr[1];
                zipCodes.add(zipCode);
            }
            in.close();
        }catch (FileNotFoundException e){
            e.printStackTrace();
        }
		
		return zipCodes;
	}

}

class IndeedClient {
	//Create a new WebClient with any BrowserVersion. WebClient belongs to the
	//HtmlUnit library.
	private final WebClient WEB_CLIENT = new WebClient(BrowserVersion.CHROME);
	
	//what: job title, keywords, or company
	//where: city, state, or zip code
	private final String what;
	private final String where;
	
	//Our constructor. Sets our what and where and does some client config.
	IndeedClient(String what, String where){
		this.what = what;
		this.where = where;
		
		WEB_CLIENT.getCookieManager().setCookiesEnabled(true);
	}
	
	public String search(){
		String searchURL = "https://www.indeed.com/";	
		String returnURL = "";
		try {
			//Create an HtmlPage and get the search page.
			HtmlPage searchPage = WEB_CLIENT.getPage(searchURL);
			System.out.println(searchPage.getTabbableElementIds());
			
			HtmlForm searchForm = searchPage.getForms().get(0);
			if(searchForm == null) {
				System.out.println("YOU ARE STUPID");
			}
			else {
				System.out.println("YOU ARE LESS STUPID");
			}
			
			int childNumber = 0;
			for(DomElement e : searchForm.getChildElements()) {
				if(childNumber == 0) {
					DomElement c = e.getLastElementChild();
					DomElement inputField = c.getLastElementChild();
					((HtmlInput) inputField).setValueAttribute(what);
				}
				else if(childNumber == 1) {
					DomElement c = e.getLastElementChild();
					DomElement inputField = c.getLastElementChild();
					((HtmlInput) inputField).setValueAttribute(where);
				}
				else {
					DomElement button = e.getLastElementChild();
					HtmlPage newPage = (HtmlPage) button.click();
					returnURL = newPage.getUrl().toString();
				}
				childNumber++;
			}
		
		} catch (FailingHttpStatusCodeException e) {
			e.printStackTrace();
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return returnURL;
	}
	
	public String getHtml(String URL){
		try {
			//All this method does is return the HTML response for some URL.
			//We'll call this after we log in!
			return WEB_CLIENT.getPage(URL).getWebResponse().getContentAsString();
		} catch (FailingHttpStatusCodeException e) {
			e.printStackTrace();
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}
}